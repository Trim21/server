// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bangumi/server/internal/dal/dao"
)

func newEpRevision(db *gorm.DB) epRevision {
	_epRevision := epRevision{}

	_epRevision.epRevisionDo.UseDB(db)
	_epRevision.epRevisionDo.UseModel(&dao.EpRevision{})

	tableName := _epRevision.epRevisionDo.TableName()
	_epRevision.ALL = field.NewAsterisk(tableName)
	_epRevision.ID = field.NewUint32(tableName, "ep_rev_id")
	_epRevision.Sid = field.NewField(tableName, "rev_sid")
	_epRevision.Eids = field.NewString(tableName, "rev_eids")
	_epRevision.EpInfobox = field.NewString(tableName, "rev_ep_infobox")
	_epRevision.CreatorID = field.NewUint32(tableName, "rev_creator")
	_epRevision.Version = field.NewBool(tableName, "rev_version")
	_epRevision.CreatedTime = field.NewUint32(tableName, "rev_dateline")
	_epRevision.EditSummary = field.NewString(tableName, "rev_edit_summary")

	_epRevision.fillFieldMap()

	return _epRevision
}

type epRevision struct {
	epRevisionDo epRevisionDo

	ALL         field.Asterisk
	ID          field.Uint32
	Sid         field.Field
	Eids        field.String
	EpInfobox   field.String
	CreatorID   field.Uint32
	Version     field.Bool
	CreatedTime field.Uint32
	EditSummary field.String

	fieldMap map[string]field.Expr
}

func (e epRevision) Table(newTableName string) *epRevision {
	e.epRevisionDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e epRevision) As(alias string) *epRevision {
	e.epRevisionDo.DO = *(e.epRevisionDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *epRevision) updateTableName(table string) *epRevision {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint32(table, "ep_rev_id")
	e.Sid = field.NewField(table, "rev_sid")
	e.Eids = field.NewString(table, "rev_eids")
	e.EpInfobox = field.NewString(table, "rev_ep_infobox")
	e.CreatorID = field.NewUint32(table, "rev_creator")
	e.Version = field.NewBool(table, "rev_version")
	e.CreatedTime = field.NewUint32(table, "rev_dateline")
	e.EditSummary = field.NewString(table, "rev_edit_summary")

	e.fillFieldMap()

	return e
}

func (e *epRevision) WithContext(ctx context.Context) *epRevisionDo {
	return e.epRevisionDo.WithContext(ctx)
}

func (e epRevision) TableName() string { return e.epRevisionDo.TableName() }

func (e epRevision) Alias() string { return e.epRevisionDo.Alias() }

func (e *epRevision) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *epRevision) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 8)
	e.fieldMap["ep_rev_id"] = e.ID
	e.fieldMap["rev_sid"] = e.Sid
	e.fieldMap["rev_eids"] = e.Eids
	e.fieldMap["rev_ep_infobox"] = e.EpInfobox
	e.fieldMap["rev_creator"] = e.CreatorID
	e.fieldMap["rev_version"] = e.Version
	e.fieldMap["rev_dateline"] = e.CreatedTime
	e.fieldMap["rev_edit_summary"] = e.EditSummary
}

func (e epRevision) clone(db *gorm.DB) epRevision {
	e.epRevisionDo.ReplaceDB(db)
	return e
}

type epRevisionDo struct{ gen.DO }

func (e epRevisionDo) Debug() *epRevisionDo {
	return e.withDO(e.DO.Debug())
}

func (e epRevisionDo) WithContext(ctx context.Context) *epRevisionDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e epRevisionDo) ReadDB() *epRevisionDo {
	return e.Clauses(dbresolver.Read)
}

func (e epRevisionDo) WriteDB() *epRevisionDo {
	return e.Clauses(dbresolver.Write)
}

func (e epRevisionDo) Clauses(conds ...clause.Expression) *epRevisionDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e epRevisionDo) Returning(value interface{}, columns ...string) *epRevisionDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e epRevisionDo) Not(conds ...gen.Condition) *epRevisionDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e epRevisionDo) Or(conds ...gen.Condition) *epRevisionDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e epRevisionDo) Select(conds ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e epRevisionDo) Where(conds ...gen.Condition) *epRevisionDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e epRevisionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *epRevisionDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e epRevisionDo) Order(conds ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e epRevisionDo) Distinct(cols ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e epRevisionDo) Omit(cols ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e epRevisionDo) Join(table schema.Tabler, on ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e epRevisionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e epRevisionDo) RightJoin(table schema.Tabler, on ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e epRevisionDo) Group(cols ...field.Expr) *epRevisionDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e epRevisionDo) Having(conds ...gen.Condition) *epRevisionDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e epRevisionDo) Limit(limit int) *epRevisionDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e epRevisionDo) Offset(offset int) *epRevisionDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e epRevisionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *epRevisionDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e epRevisionDo) Unscoped() *epRevisionDo {
	return e.withDO(e.DO.Unscoped())
}

func (e epRevisionDo) Create(values ...*dao.EpRevision) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e epRevisionDo) CreateInBatches(values []*dao.EpRevision, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e epRevisionDo) Save(values ...*dao.EpRevision) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e epRevisionDo) First() (*dao.EpRevision, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpRevision), nil
	}
}

func (e epRevisionDo) Take() (*dao.EpRevision, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpRevision), nil
	}
}

func (e epRevisionDo) Last() (*dao.EpRevision, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpRevision), nil
	}
}

func (e epRevisionDo) Find() ([]*dao.EpRevision, error) {
	result, err := e.DO.Find()
	return result.([]*dao.EpRevision), err
}

func (e epRevisionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.EpRevision, err error) {
	buf := make([]*dao.EpRevision, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e epRevisionDo) FindInBatches(result *[]*dao.EpRevision, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e epRevisionDo) Attrs(attrs ...field.AssignExpr) *epRevisionDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e epRevisionDo) Assign(attrs ...field.AssignExpr) *epRevisionDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e epRevisionDo) Joins(fields ...field.RelationField) *epRevisionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e epRevisionDo) Preload(fields ...field.RelationField) *epRevisionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e epRevisionDo) FirstOrInit() (*dao.EpRevision, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpRevision), nil
	}
}

func (e epRevisionDo) FirstOrCreate() (*dao.EpRevision, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EpRevision), nil
	}
}

func (e epRevisionDo) FindByPage(offset int, limit int) (result []*dao.EpRevision, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e epRevisionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e epRevisionDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e epRevisionDo) Delete(models ...*dao.EpRevision) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *epRevisionDo) withDO(do gen.Dao) *epRevisionDo {
	e.DO = *do.(*gen.DO)
	return e
}
